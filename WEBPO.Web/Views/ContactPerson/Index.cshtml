@model ContactPersonViewModel

@{
    ViewData["Title"] = "Contact Person Entry";
    Layout = "~/Views/Shared/_Layout.cshtml";
    SelectList listItems = ViewData["VendorList"] as SelectList;
}


<div class="card card-body">

    <div class="row">
        <div class="col-12">
            <div class="form-group row">
                <div class="form-inline col-6">
                    <label asp-for="VendorCode" class="asp-label justify-content-end col-form-label col-sm-3 control-label text-right"></label>
                    <div class="col-sm-9 ">
                        <select class="form-control form-control-sm w-100" asp-for="VendorCode" asp-items="listItems">
                            @if (listItems.Count() > 1) {
                                <option value="">-- Select All --</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="form-inline col-6">
                    <label asp-for="ContactName" class="asp-label justify-content-end col-form-label col-sm-3 control-label text-right"></label>
                    <div class="col-sm-9 ">
                        <input asp-for="ContactName" class="form-control form-control-sm" autocomplete="off" />
                    </div>
                </div>

                <div class="form-inline col-6">
                    <label asp-for="DepartmentName" class="asp-label justify-content-end col-form-label col-sm-3 control-label text-right"></label>
                    <div class="col-sm-9 ">
                        <input asp-for="DepartmentName" class="form-control form-control-sm" autocomplete="off" />
                    </div>
                </div>
            </div>

            <div class="form-group row">
                <div class="form-inline col-12">
                    <div class="mx-auto">
                        <button id="btnSearch" type="button" class="btn btn-sm btn-primary mr-3"> Search</button>

                        <button id="btnClear" type="button" class="btn btn-sm btn-secondary mr-3"> Clear</button>

                        <a href="@Url.Action("Create")" class="btn btn-sm btn-success">New</a>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="card card-body">
    <table id="dataTable" class="table table-bordered table-striped ">
        <thead class="bg-success text-light"></thead>
    </table>
</div>



@section Scripts {
    <script type="text/javascript">
    let dt;
    let seq = 1;

    $(function () {
        updateUI();

        initCtrl();
    })

    function initCtrl() {
        $('select:not([name=dataTable_length])').select2({ width: 'resolve', dropdownAutoWidth: 'true' });

        $('#btnSearch').click(function () {
            if (dt != null) return dt.ajax.reload();
            updateUI();
        });

        $('#btnClear').click(function () {

            if ($('[name=VendorCode] option').length > 2) $('[name=VendorCode]').val("").trigger('change');
            $('[name=ContactName]').val("");
            $('[name=DepartmentName]').val("");
        });


    }

    function updateUI() {
        const endPoint = '@Url.Action("GetContactPerson", "ContactPerson")';
        let columnDefs;
        let columns = [
            {
                "title": "No.", "data": null, "className": "text-center", "searchable": false, "width": "5%",
                "render": function (data, type, row, meta) {
                    return meta.row + 1;
                }
            },
            {
                "title": "Vendor", "data": null, "className": "text-left",
                "render": function (data, type, row, meta) {
                    let html = data.VendorCode + " : " + data.VendorCode;
                    return html;
                }
            },
            { "title": 'Contact Name', "data": "ContactName" },
            { "title": 'Department', "data": "DepartmentId" },
            { "title": 'E-mail', "data": "Email" },
            { "title": 'Tel No', "data": "TelNo" },
            { "title": 'Mobile No', "data": "MobileNo" },
            {
                "title": "", "data": null, "className": "text-center",
                "render": function (data, type, row, meta) {
                    let html = '<button name="btnEdit" type="button" class="btn btn-sm bg-transparent mr-3 p-0"><i class="fa-1-5x fas fa-edit"></i></button>';
                    html += '<button name="btnDelete" type="button" class="btn btn-sm bg-transparent p-0"><i class="fa-1-5x fas fa-trash-alt"></i></button>';
                    return html;
                }
            },
        ]

        dt = $('#dataTable').DataTable({
                "destroy": true,
                "bSort": false,
                "processing": true,
                "serverSide": true,
                "responsive": true,
                "autoWidth": false,
                "scrollX": true,
                "searching": false,
                "lengthMenu": [[10, 25, 50], [10, 25, 50]],
                "aaSorting": [[0, 'desc']],
                "language": {
                    processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>'
                },
                "ajax": {
                    url: endPoint,
                    type: "GET",
                    data: function (data) {
                        var info = $('#dataTable').DataTable().page.info();
                        return {
                            draw: seq,
                            pageIndex: info.page + 1,
                            pageSize: info.length,
                            vendorCode: $('[name=VendorCode]').val(),
                            ContactName: $('[name=ContactName]').val(),
                            DepartmentName: $('[name=DepartmentName]').val()
                        };
                    },
                    dataFilter: function (resp) {
                        var json = jQuery.parseJSON(jQuery.parseJSON(resp));
                        return JSON.stringify(json); // return JSON string
                    },
                    dataSrc: function (data) {
                        return data.data;
                    }
                },
                "columns": columns,
                "columnDefs": columnDefs,
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                },
                "footerCallback": function (row, data, start, end, display) {
                },
                fnDrawCallback: function (oSettings) {
                    seq++;
                }
            });

            $('#dataTable tbody').on('click', 'button[name=btnEdit]', function (e) {
                var data = dt.row($(this).parents('tr')).data().ContactId;
                showLoadding();
                window.location.href = '@Url.Action("Edit", "ContactPerson")/' + data;
            });

            $('#dataTable tbody').on('click', 'button[name=btnDelete]', function (e) {
                var data = dt.row($(this).parents('tr')).data().ContactId;
                deleteData(data);
            });
    }

        function deleteData(id) {
            showLoadding();
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete","ContactPerson")',
                data: { 'id': id },
                success: function (resp) {
                    let { success, icon, message, data } = getResponse(resp);

                    applicationAlert(message, icon);

                    if (success) updateUI();
                },
                error: function () {
                    applicationAlert();
                },
                complete: function () {
                    hideLoadding();
                }
            });
        }

    </script>
}


